go-pardocs:  Parliament Docs
A New Harapan
25 Jun 2019

Michael Leow
FOI Initiatives, Sinar Project
leow@sinarproject.org
https://www.sinarproject.org/
@leowmjw
https://github.com/Sinar/go-pardocs

* Agenda

- May 9, 2018 .. A New Harapan
- What is a Hansard?
- What is ParDocs?
- Concepts
- Lessons
- Resources
- Q&A

* May 9, 2018 .. A New Harapan

.image assets/gopher-starwars-ashleymcnamara-small.png

.caption _StarWars-Gopher_ by [[https://github.com/ashleymcnamara/gophers/blob/master/GOPHER_STAR_WARS.png][Ashley McNamara]]


* What is a Hansard?

- Previous: Only Spoken Questions are available online [[https://www.parlimen.gov.my/][Parliment]]
- Previous: OKM minions needed to scan book of Written Answers 
- Now: Written answers can be downloaded + Quality seems better (direct)

.image assets/parlimen-gov-my.png

: Hansard is the official record; inherited from the British
: We had cases of pencil / pen marks to override numbering; not do clean
: New Government - New document! - Old site :(

* What is  ParDocs? [[ https://pardocs.sinarproject.org ]]

- Originally written in Java, used iText library - [[https://github.com/leowmjw/parliamentMY-QA-blast][parliamentMY-QA-blast]]
- Lots of Regexp; fragile, 80% success rate

.image assets/pardocs.png

: Long live Netbeans! Original parliamentMY-QA-blast 
: Hansards are the official records of the debates + written questions
: Broke with the new government as the structure changed and no longer worked with previous RegExp

* Concept

- Concept: PDF, Hansard, Splitter, CLI

.image assets/code-structure.png

.caption Maps to [[https://godoc.org/github.com/Sinar/go-pardocs/internal/hansard#PDFPage][Internal APIs]]


: We work inside out from the raw PDF material to the fully formed Parliament Document which has publicly accessible APIs

* Concept: PDF

When PDF source is loaded, extract hansard.MaxLineProcessed - 7 lines of PDFTxtSameLines

    type PDFPage struct {
        PageNo           int
        PDFPlainText     string
        PDFTxtSameLines  []string // combined content with same line .. proxy for changes
        PDFTxtSameStyles []string // combined content with same style .. proxy for changes
    }
    
    type PDFDocument struct {
        NumPages   int
        Pages      []PDFPage
        sourcePath string
    }

.caption PDF text extraction from [[https://github.com/ledongthuc/pdf]] library

: Each PDF page can be represented by change of line (x,y-axis) or change of style.  
: The change of style can mean important information
: Libraries used  github.com/ledongthuc/pdf

* Concept: Hansard

    type HansardPage struct {
        ...
    }
    
is persisted as the split plan:

    type HansardQuestion struct {
        QuestionNum           string
        questionNumberSnippet string
        PageNumStart          int
        PageNumEnd            int
        pages                 []HansardPage
    }
    
    type HansardDocument struct {
        ParliamentSession string // Get this from the front page cover .. or the reference lookup ..
        HansardType       HansardType
        HansardQuestions  []HansardQuestion
        splitterState     splitterState
        originalPDFPath   string // Used for split later ..
    }
    

* Concept: Splitter

    type SplitHansardDocumentPlan struct {
        sessionName   string
        hansardType   string
        workingDir    string
        sourcePDFPath string
    }

Split plan was saved earlier:

    func SavePlan(confHansardType HansardType, workingDir string, sourcePDFPath string, hansardDoc *HansardDocument) {
        ...
    }

and then later loaded to be used in actual split execution:

    func (shdp *SplitHansardDocumentPlan) ExecuteSplit(label string, hq HansardQuestion) {
        ...
    }
    
.caption Split functionality from [[https://github.com/hhrutter/pdfcpu][pdfcpu]] library
    
: Splitter originally was trying to do too much inside; with the test
: we can refactor back out to the public package level
 
* Concept: CLI

- Experimented with using [[https://github.com/google/subcommands][subcommands]] library
- Fills out the Configuration struct before executing

    ./dist/darwin-amd64/go-pardocs 
    2019/06/25 07:32:23 Welcome to Sinar Project go-pardocs!
    Usage: go-pardocs <flags> <subcommand> <subcommand args>
    
    Subcommands:
            commands         list all command names
            flags            describe all known top-level flags
            help             describe subcommands and their syntax
    
    Subcommands for Execute Split:
            split            Splitting SourcePDF based on plan ..
    
    Subcommands for Planning Split:
            plan             Plan the Parliament Doc Splitting ..
    
    
    Use "go-pardocs flags" for a list of top-level flags

.caption Maps direct to [[https://godoc.org/github.com/Sinar/go-pardocs][ParDocs Public API]]

* Lessons

- Lessons: internal
- Lessons: testing

: Use the standard table testing generated by the IDE
: The ability to stuff things in the internal folder helps out

* Lessons: internal

- Can expose most function + fields publicly
- Helps when exploring out the design + split
- Top level only expose the allowed actions; refactor from internal Splitter

* Lessons: testing

- Use testdata to store sample PDFs
- Use tempdir 
			dir, err := ioutil.TempDir("", "pardocs")
			if err != nil {
				log.Fatal(err)
			}
			// Comment out below if need to see the output in dir
			defer os.RemoveAll(dir)

- Run it end-to-end via public integration test
- TODO: Use go-cmp to show diff in extracted structures

: - TODO: Structure it (TODO)
: - TODO: Use golden snapshot

* What Next?

- Add more tests
- Add more sample PDFs edge cases
- Fix know bug (regexp fails rune type contents)
- Add more auto-detect capabilities for document type + parliament session
- Add the capabilities to analyze full page content; extracting PopIt elements


* Resources

.link https://pardocs.sinarproject.org
.link https://github.com/Sinar/go-pardocs
.link https://github.com/Sinar/odd2019
.link https://github.com/Sinar/odd2019/commit/4092078989f36c345f06a0b99028b58a613b2d85 OSCv3 data

* Q & A 

Any questions?

* Bonus: GopherconSG! Discuss!

.link https://www.youtube.com/playlist?list=PLq2Nv-Sh8EbYBYteOWx9rNuy0JSF8mzsu#gopherconsg


